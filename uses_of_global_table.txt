Cacher.cache_recipes():
    global.recipes - dictionary of ItemOrFluidFullName (eg. "item/iron-plate" or "fluid/petroleum-gas") to array[LuaRecipePrototype], the list of all recipes that have that item or fluid as a product.

Cacher.cache_crafting_machines():
    global.crafting_machines_by_category - dictionary of string (valid crafting category) to array[LuaEntityPrototype] (all the crafting machines that operate on that category)
    global.pollution_per_minute_of_crafting_machines - dictionary of LuaEntityPrototype (its keys are all the crafting machine prototypes in the game at the time of caching) to double (the base pollution per minute of that machine)

Initializer.initialize():
    global[player_index].crafting_machine_preferences - dictionary of string (valid crafting category) to LuaEntityPrototype (the chosen crafting machine for that category);
    
    global[player_index].recipe_preferences - dictionary of ItemOrFluidFullName to LuaRecipePrototype, the recipe of choice for the item/fluid with that name;
    
    global[player_index].module_preferences_by_recipe_name - a dictionary of recipe names to tables that store the names of the chosen modules for that recipe on positive indexes (1, 2, 3, and so on), the same order as they are shown in the respective gui, their respective counts on negative indexes (-1 for the first module, -2 for the second, and so on) and the combined effects of the modules in a Types/Effect table stored in the field "effect";

Calculator.build():
    global[player_index].calculator = the player's calculator (the main frame)
    global[player_index].sheet_section - the sheet section of the calculator belonging to the player; it has the "sheet_button_flow" flow and the "sheet_pane" tabbed pane as children in this order
    global[player_index].totals_section, global[player.index].totals_table_flow, global[player.index].total_production_rates = the player's totals section and related content

control.lua:
    global.computation_stack - a stack (array) of tabels with fields "call" (function) and "parameters" (array). At each tick, one table will be popped off of the stack and the associated function call made with the stored parameters